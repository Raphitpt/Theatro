openapi: 3.0.0
info:
    title: Theatro
    version: 1.0.0
    description: 'API de gestion des √©v√©nements (spectacles et ateliers) avec syst√®me d''authentification JWT et gestion des r√¥les'
servers:
    - url: '{{baseUrl}}'
    - url: http://localhost:3000

components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: 'Token JWT obtenu via /login (valide 24h). Format: Authorization: Bearer <token>'

    responses:
        Unauthorized:
            description: 'Token manquant ou invalide'
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Unauthorized. No token provided.'

        Forbidden:
            description: 'Droits insuffisants - R√¥le Administrator ou Manager requis'
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Acc√®s refus√©. Droits administrateur ou manager requis.'

        ForbiddenAdmin:
            description: 'Droits insuffisants - R√¥le Administrator requis'
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Acc√®s refus√©. Droits administrateur requis.'

paths:
    /login:
        post:
            summary: Login
            description: 'Authentifie un utilisateur et retourne un token JWT valide 24h'
            tags:
                - Auth
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - mail
                                - password
                            properties:
                                mail:
                                    type: string
                                    format: email
                                    example: 'user@example.com'
                                password:
                                    type: string
                                    format: password
                                    example: 'SecureP@ssw0rd'
            responses:
                '200':
                    description: 'Authentification r√©ussie'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                        description: 'JWT token valide 24h'
                                    user:
                                        type: object
                                        properties:
                                            userId:
                                                type: string
                                            role:
                                                type: string
                                                enum: [Member, Manager, Administrator]
                '401':
                    description: 'Identifiants invalides'
                '400':
                    description: 'Requ√™te invalide'

    /register:
        post:
            summary: 'Register new user'
            description: 'üîí **ADMIN ONLY** - Cr√©e un nouveau compte utilisateur (Member ou Manager) et envoie un email d''invitation'
            tags:
                - Auth
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - mail
                                - firstName
                                - lastName
                            properties:
                                mail:
                                    type: string
                                    format: email
                                    example: 'newuser@example.com'
                                firstName:
                                    type: string
                                    example: 'Jean'
                                lastName:
                                    type: string
                                    example: 'Dupont'
                                role:
                                    type: string
                                    enum: [Member, Manager]
                                    default: Member
                                    description: 'R√¥le du nouvel utilisateur'
            responses:
                '201':
                    description: 'Utilisateur cr√©√© avec succ√®s'
                '400':
                    description: 'Email d√©j√† utilis√© ou donn√©es invalides'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/ForbiddenAdmin'

    /choose-password:
        patch:
            summary: 'Choose Password'
            description: 'Permet √† un nouvel utilisateur de d√©finir son mot de passe via le lien re√ßu par email'
            tags:
                - Auth
            parameters:
                - name: token
                  in: query
                  required: true
                  description: 'Token de r√©initialisation re√ßu par email'
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - password
                            properties:
                                password:
                                    type: string
                                    format: password
                                    minLength: 8
                                    example: 'SecureP@ssw0rd'
            responses:
                '200':
                    description: 'Mot de passe d√©fini avec succ√®s'
                '400':
                    description: 'Token invalide ou expir√©'
                '404':
                    description: 'Utilisateur non trouv√©'
    /event/show:
        post:
            summary: 'Create show'
            description: 'üîí **MANAGER/ADMIN ONLY** - Cr√©e un nouveau spectacle'
            tags:
                - Event
                - Show
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - dateTimeStart
                                - dateTimeEnd
                                - location
                                - memberMax
                            properties:
                                name:
                                    type: string
                                    example: 'Spectacle de fin d''ann√©e'
                                dateTimeStart:
                                    type: string
                                    format: date-time
                                    example: '2025-12-15T20:00:00Z'
                                dateTimeEnd:
                                    type: string
                                    format: date-time
                                    example: '2025-12-15T22:30:00Z'
                                location:
                                    type: string
                                    example: 'Th√©√¢tre Municipal'
                                memberMax:
                                    type: integer
                                    minimum: 1
                                    example: 50
                                roles:
                                    type: array
                                    items:
                                        type: string
                                    example: ['Com√©dien', 'Technicien', 'R√©gisseur']
            responses:
                '201':
                    description: 'Spectacle cr√©√© avec succ√®s'
                '400':
                    description: 'Donn√©es invalides'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/Forbidden'

    /show/{showId}/apply:
        post:
            summary: 'Apply to show'
            description: 'üîì **AUTHENTICATED** - Postuler √† un spectacle'
            tags:
                - Event
                - Show
            security:
                - BearerAuth: []
            parameters:
                - name: showId
                  in: path
                  required: true
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                preferredRoles:
                                    type: array
                                    items:
                                        type: string
                                    example: ['Com√©dien']
                                message:
                                    type: string
                                    example: 'Je serais ravi de participer'
            responses:
                '201':
                    description: 'Candidature envoy√©e'
                '400':
                    description: 'Candidature d√©j√† existante ou donn√©es invalides'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    description: 'Spectacle non trouv√©'

    /show/{showId}:
        get:
            summary: 'Get show'
            description: 'üîí **MANAGER/ADMIN ONLY** - R√©cup√©rer les d√©tails d''un spectacle'
            tags:
                - Event
                - Show
            security:
                - BearerAuth: []
            parameters:
                - name: showId
                  in: path
                  required: true
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            responses:
                '200':
                    description: 'D√©tails du spectacle'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/Forbidden'
                '404':
                    description: 'Spectacle non trouv√©'

    /show/{showId}/applications:
        get:
            summary: 'List applications for show'
            description: 'üîí **MANAGER/ADMIN ONLY** - Liste toutes les candidatures pour un spectacle'
            tags:
                - Event
                - Application
            security:
                - BearerAuth: []
            parameters:
                - name: showId
                  in: path
                  required: true
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            responses:
                '200':
                    description: 'Liste des candidatures'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/Forbidden'
                '404':
                    description: 'Spectacle non trouv√©'
    /application/{applicationId}/process:
        patch:
            summary: 'Update application status'
            description: 'üîí **MANAGER/ADMIN ONLY** - Accepter ou refuser une candidature'
            tags:
                - Event
                - Application
            security:
                - BearerAuth: []
            parameters:
                - name: applicationId
                  in: path
                  required: true
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - status
                            properties:
                                status:
                                    type: string
                                    enum: ['accepted', 'refused', 'pending']
                                    example: 'accepted'
                                notes:
                                    type: string
                                    example: 'Profil int√©ressant'
            responses:
                '200':
                    description: 'Candidature mise √† jour'
                '400':
                    description: 'Statut invalide'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/Forbidden'
                '404':
                    description: 'Candidature non trouv√©e'

    /event/workshop:
        post:
            summary: 'Create workshop'
            description: 'üîí **MANAGER/ADMIN ONLY** - Cr√©e un nouvel atelier'
            tags:
                - Event
                - Workshop
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - name
                                - dateTimeStart
                                - dateTimeEnd
                                - location
                                - memberMax
                            properties:
                                name:
                                    type: string
                                    example: 'Atelier impro d√©butants'
                                dateTimeStart:
                                    type: string
                                    format: date-time
                                    example: '2025-11-20T18:00:00Z'
                                dateTimeEnd:
                                    type: string
                                    format: date-time
                                    example: '2025-11-20T20:00:00Z'
                                location:
                                    type: string
                                    example: 'Salle de r√©p√©tition B'
                                memberMax:
                                    type: integer
                                    minimum: 1
                                    example: 15
            responses:
                '201':
                    description: 'Atelier cr√©√© avec succ√®s'
                '400':
                    description: 'Donn√©es invalides'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/Forbidden'

    /workshop/{workshopId}/apply:
        post:
            summary: 'Apply to workshop'
            description: 'üîì **AUTHENTICATED** - S''inscrire √† un atelier'
            tags:
                - Event
                - Workshop
            security:
                - BearerAuth: []
            parameters:
                - name: workshopId
                  in: path
                  required: true
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                availability:
                                    type: string
                                    example: 'Disponible tous les jeudis soir'
                                experience:
                                    type: string
                                    example: '2 ans de th√©√¢tre amateur'
            responses:
                '201':
                    description: 'Inscription confirm√©e'
                '400':
                    description: 'Inscription d√©j√† existante ou atelier complet'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    description: 'Atelier non trouv√©'

    /workshop/{workshopId}:
        get:
            summary: 'Get workshop'
            description: 'üîì **AUTHENTICATED** - R√©cup√©rer les d√©tails d''un atelier'
            tags:
                - Event
                - Workshop
            security:
                - BearerAuth: []
            parameters:
                - name: workshopId
                  in: path
                  required: true
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            responses:
                '200':
                    description: 'D√©tails de l''atelier'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    description: 'Atelier non trouv√©'
    /event:
        get:
            summary: 'Get all events'
            description: 'üîì **AUTHENTICATED** - Liste tous les √©v√©nements (shows et workshops)'
            tags:
                - Event
            security:
                - BearerAuth: []
            parameters:
                - name: type
                  in: query
                  required: false
                  description: 'Filtrer par type d''√©v√©nement'
                  schema:
                      type: string
                      enum: ['show', 'workshop']
                  example: 'show'
            responses:
                '200':
                    description: 'Liste des √©v√©nements'
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    type: object
                                    properties:
                                        _id:
                                            type: string
                                        name:
                                            type: string
                                        type:
                                            type: string
                                            enum: ['show', 'workshop']
                                        dateTimeStart:
                                            type: string
                                            format: date-time
                                        dateTimeEnd:
                                            type: string
                                            format: date-time
                                        location:
                                            type: string
                                        memberMax:
                                            type: integer
                '401':
                    $ref: '#/components/responses/Unauthorized'

    /event/{eventType}/{eventId}/followup:
        get:
            summary: 'Follow up event'
            description: 'üîí **MANAGER/ADMIN ONLY** - R√©capitulatif d''un √©v√©nement (participants, statuts)'
            tags:
                - Event
            security:
                - BearerAuth: []
            parameters:
                - name: eventType
                  in: path
                  required: true
                  description: 'Type d''√©v√©nement'
                  schema:
                      type: string
                      enum: ['show', 'workshop']
                  example: 'show'
                - name: eventId
                  in: path
                  required: true
                  description: 'ID de l''√©v√©nement'
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            responses:
                '200':
                    description: 'R√©capitulatif de l''√©v√©nement'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/Forbidden'
                '404':
                    description: '√âv√©nement non trouv√©'

    /member/{memberId}:
        get:
            summary: 'Get member'
            description: 'üîí **MANAGER/ADMIN ONLY** - R√©cup√©rer les informations d''un membre'
            tags:
                - Member
            security:
                - BearerAuth: []
            parameters:
                - name: memberId
                  in: path
                  required: true
                  description: 'ID du membre'
                  schema:
                      type: string
                  example: '6901ded3a9fc93e47dd0998d'
            responses:
                '200':
                    description: 'Informations du membre'
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    _id:
                                        type: string
                                    firstName:
                                        type: string
                                    lastName:
                                        type: string
                                    mail:
                                        type: string
                                        format: email
                                    role:
                                        type: string
                                        enum: [Member, Manager, Administrator]
                                    createdAt:
                                        type: string
                                        format: date-time
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '403':
                    $ref: '#/components/responses/Forbidden'
                '404':
                    description: 'Membre non trouv√©'
